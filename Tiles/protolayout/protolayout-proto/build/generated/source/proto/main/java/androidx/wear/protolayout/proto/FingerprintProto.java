// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

package androidx.wear.protolayout.proto;

public final class FingerprintProto {
  private FingerprintProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface TreeFingerprintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:androidx.wear.protolayout.proto.TreeFingerprint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     * @return Whether the root field is set.
     */
    boolean hasRoot();
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     * @return The root.
     */
    androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getRoot();
  }
  /**
   * <pre>
   * Fingerprint for a layout tree that makes it efficient to compare 2 trees.
   * </pre>
   *
   * Protobuf type {@code androidx.wear.protolayout.proto.TreeFingerprint}
   */
  public  static final class TreeFingerprint extends
      com.google.protobuf.GeneratedMessageLite<
          TreeFingerprint, TreeFingerprint.Builder> implements
      // @@protoc_insertion_point(message_implements:androidx.wear.protolayout.proto.TreeFingerprint)
      TreeFingerprintOrBuilder {
    private TreeFingerprint() {
    }
    private int bitField0_;
    public static final int ROOT_FIELD_NUMBER = 1;
    private androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint root_;
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     */
    @java.lang.Override
    public boolean hasRoot() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     */
    @java.lang.Override
    public androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getRoot() {
      return root_ == null ? androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.getDefaultInstance() : root_;
    }
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     */
    private void setRoot(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
      value.getClass();
  root_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeRoot(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
      value.getClass();
  if (root_ != null &&
          root_ != androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.getDefaultInstance()) {
        root_ =
          androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.newBuilder(root_).mergeFrom(value).buildPartial();
      } else {
        root_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Fingerprint for the node at the root of the tree. This must match the root
     * element of the layout that this object represents.
     * </pre>
     *
     * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
     */
    private void clearRoot() {  root_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Fingerprint for a layout tree that makes it efficient to compare 2 trees.
     * </pre>
     *
     * Protobuf type {@code androidx.wear.protolayout.proto.TreeFingerprint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint, Builder> implements
        // @@protoc_insertion_point(builder_implements:androidx.wear.protolayout.proto.TreeFingerprint)
        androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprintOrBuilder {
      // Construct using androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      @java.lang.Override
      public boolean hasRoot() {
        return instance.hasRoot();
      }
      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      @java.lang.Override
      public androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getRoot() {
        return instance.getRoot();
      }
      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      public Builder setRoot(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
        copyOnWrite();
        instance.setRoot(value);
        return this;
        }
      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      public Builder setRoot(
          androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.Builder builderForValue) {
        copyOnWrite();
        instance.setRoot(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      public Builder mergeRoot(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
        copyOnWrite();
        instance.mergeRoot(value);
        return this;
      }
      /**
       * <pre>
       * Fingerprint for the node at the root of the tree. This must match the root
       * element of the layout that this object represents.
       * </pre>
       *
       * <code>.androidx.wear.protolayout.proto.NodeFingerprint root = 1;</code>
       */
      public Builder clearRoot() {  copyOnWrite();
        instance.clearRoot();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:androidx.wear.protolayout.proto.TreeFingerprint)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "root_",
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1009\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint> parser = PARSER;
          if (parser == null) {
            synchronized (androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:androidx.wear.protolayout.proto.TreeFingerprint)
    private static final androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint DEFAULT_INSTANCE;
    static {
      TreeFingerprint defaultInstance = new TreeFingerprint();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TreeFingerprint.class, defaultInstance);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.TreeFingerprint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TreeFingerprint> PARSER;

    public static com.google.protobuf.Parser<TreeFingerprint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NodeFingerprintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:androidx.wear.protolayout.proto.NodeFingerprint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Numeric fingerprint for the type of the node.
     * </pre>
     *
     * <code>sfixed32 self_type_value = 1;</code>
     * @return The selfTypeValue.
     */
    int getSelfTypeValue();

    /**
     * <pre>
     * Numeric fingerprint for the node's own properties, without its children.
     * Note that this may depend on the way the node was built. In other words, 2
     * messages with the same content may have different fingerprints if their
     * setters were called in a different order. Expected to be virtually free
     * of collisions for the purposes of diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 self_props_value = 2;</code>
     * @return The selfPropsValue.
     */
    int getSelfPropsValue();

    /**
     * <pre>
     * Numeric fingerprint for all the children under this node. This value will
     * change when any of the children have changed. May be 0 if there are no
     * children. Expected to be virtually free of collisions for the purposes of
     * diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 child_nodes_value = 3;</code>
     * @return The childNodesValue.
     */
    int getChildNodesValue();

    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    java.util.List<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> 
        getChildNodesList();
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getChildNodes(int index);
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    int getChildNodesCount();
  }
  /**
   * <pre>
   * Fingerprint for a node in the layout tree.
   * </pre>
   *
   * Protobuf type {@code androidx.wear.protolayout.proto.NodeFingerprint}
   */
  public  static final class NodeFingerprint extends
      com.google.protobuf.GeneratedMessageLite<
          NodeFingerprint, NodeFingerprint.Builder> implements
      // @@protoc_insertion_point(message_implements:androidx.wear.protolayout.proto.NodeFingerprint)
      NodeFingerprintOrBuilder {
    private NodeFingerprint() {
      childNodes_ = emptyProtobufList();
    }
    public static final int SELF_TYPE_VALUE_FIELD_NUMBER = 1;
    private int selfTypeValue_;
    /**
     * <pre>
     * Numeric fingerprint for the type of the node.
     * </pre>
     *
     * <code>sfixed32 self_type_value = 1;</code>
     * @return The selfTypeValue.
     */
    @java.lang.Override
    public int getSelfTypeValue() {
      return selfTypeValue_;
    }
    /**
     * <pre>
     * Numeric fingerprint for the type of the node.
     * </pre>
     *
     * <code>sfixed32 self_type_value = 1;</code>
     * @param value The selfTypeValue to set.
     */
    private void setSelfTypeValue(int value) {
      
      selfTypeValue_ = value;
    }
    /**
     * <pre>
     * Numeric fingerprint for the type of the node.
     * </pre>
     *
     * <code>sfixed32 self_type_value = 1;</code>
     */
    private void clearSelfTypeValue() {

      selfTypeValue_ = 0;
    }

    public static final int SELF_PROPS_VALUE_FIELD_NUMBER = 2;
    private int selfPropsValue_;
    /**
     * <pre>
     * Numeric fingerprint for the node's own properties, without its children.
     * Note that this may depend on the way the node was built. In other words, 2
     * messages with the same content may have different fingerprints if their
     * setters were called in a different order. Expected to be virtually free
     * of collisions for the purposes of diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 self_props_value = 2;</code>
     * @return The selfPropsValue.
     */
    @java.lang.Override
    public int getSelfPropsValue() {
      return selfPropsValue_;
    }
    /**
     * <pre>
     * Numeric fingerprint for the node's own properties, without its children.
     * Note that this may depend on the way the node was built. In other words, 2
     * messages with the same content may have different fingerprints if their
     * setters were called in a different order. Expected to be virtually free
     * of collisions for the purposes of diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 self_props_value = 2;</code>
     * @param value The selfPropsValue to set.
     */
    private void setSelfPropsValue(int value) {
      
      selfPropsValue_ = value;
    }
    /**
     * <pre>
     * Numeric fingerprint for the node's own properties, without its children.
     * Note that this may depend on the way the node was built. In other words, 2
     * messages with the same content may have different fingerprints if their
     * setters were called in a different order. Expected to be virtually free
     * of collisions for the purposes of diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 self_props_value = 2;</code>
     */
    private void clearSelfPropsValue() {

      selfPropsValue_ = 0;
    }

    public static final int CHILD_NODES_VALUE_FIELD_NUMBER = 3;
    private int childNodesValue_;
    /**
     * <pre>
     * Numeric fingerprint for all the children under this node. This value will
     * change when any of the children have changed. May be 0 if there are no
     * children. Expected to be virtually free of collisions for the purposes of
     * diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 child_nodes_value = 3;</code>
     * @return The childNodesValue.
     */
    @java.lang.Override
    public int getChildNodesValue() {
      return childNodesValue_;
    }
    /**
     * <pre>
     * Numeric fingerprint for all the children under this node. This value will
     * change when any of the children have changed. May be 0 if there are no
     * children. Expected to be virtually free of collisions for the purposes of
     * diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 child_nodes_value = 3;</code>
     * @param value The childNodesValue to set.
     */
    private void setChildNodesValue(int value) {
      
      childNodesValue_ = value;
    }
    /**
     * <pre>
     * Numeric fingerprint for all the children under this node. This value will
     * change when any of the children have changed. May be 0 if there are no
     * children. Expected to be virtually free of collisions for the purposes of
     * diffing layout trees.
     * </pre>
     *
     * <code>sfixed32 child_nodes_value = 3;</code>
     */
    private void clearChildNodesValue() {

      childNodesValue_ = 0;
    }

    public static final int CHILD_NODES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> childNodes_;
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> getChildNodesList() {
      return childNodes_;
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    public java.util.List<? extends androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprintOrBuilder> 
        getChildNodesOrBuilderList() {
      return childNodes_;
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    @java.lang.Override
    public int getChildNodesCount() {
      return childNodes_.size();
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    @java.lang.Override
    public androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getChildNodes(int index) {
      return childNodes_.get(index);
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    public androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprintOrBuilder getChildNodesOrBuilder(
        int index) {
      return childNodes_.get(index);
    }
    private void ensureChildNodesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> tmp = childNodes_;
      if (!tmp.isModifiable()) {
        childNodes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void setChildNodes(
        int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
      value.getClass();
  ensureChildNodesIsMutable();
      childNodes_.set(index, value);
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void addChildNodes(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
      value.getClass();
  ensureChildNodesIsMutable();
      childNodes_.add(value);
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void addChildNodes(
        int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
      value.getClass();
  ensureChildNodesIsMutable();
      childNodes_.add(index, value);
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void addAllChildNodes(
        java.lang.Iterable<? extends androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> values) {
      ensureChildNodesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, childNodes_);
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void clearChildNodes() {
      childNodes_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The child nodes under this node. These must be in exactly the same order
     * and number as the corresponding elements under the corresponding layout
     * node.
     * </pre>
     *
     * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
     */
    private void removeChildNodes(int index) {
      ensureChildNodesIsMutable();
      childNodes_.remove(index);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Fingerprint for a node in the layout tree.
     * </pre>
     *
     * Protobuf type {@code androidx.wear.protolayout.proto.NodeFingerprint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint, Builder> implements
        // @@protoc_insertion_point(builder_implements:androidx.wear.protolayout.proto.NodeFingerprint)
        androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprintOrBuilder {
      // Construct using androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Numeric fingerprint for the type of the node.
       * </pre>
       *
       * <code>sfixed32 self_type_value = 1;</code>
       * @return The selfTypeValue.
       */
      @java.lang.Override
      public int getSelfTypeValue() {
        return instance.getSelfTypeValue();
      }
      /**
       * <pre>
       * Numeric fingerprint for the type of the node.
       * </pre>
       *
       * <code>sfixed32 self_type_value = 1;</code>
       * @param value The selfTypeValue to set.
       * @return This builder for chaining.
       */
      public Builder setSelfTypeValue(int value) {
        copyOnWrite();
        instance.setSelfTypeValue(value);
        return this;
      }
      /**
       * <pre>
       * Numeric fingerprint for the type of the node.
       * </pre>
       *
       * <code>sfixed32 self_type_value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSelfTypeValue() {
        copyOnWrite();
        instance.clearSelfTypeValue();
        return this;
      }

      /**
       * <pre>
       * Numeric fingerprint for the node's own properties, without its children.
       * Note that this may depend on the way the node was built. In other words, 2
       * messages with the same content may have different fingerprints if their
       * setters were called in a different order. Expected to be virtually free
       * of collisions for the purposes of diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 self_props_value = 2;</code>
       * @return The selfPropsValue.
       */
      @java.lang.Override
      public int getSelfPropsValue() {
        return instance.getSelfPropsValue();
      }
      /**
       * <pre>
       * Numeric fingerprint for the node's own properties, without its children.
       * Note that this may depend on the way the node was built. In other words, 2
       * messages with the same content may have different fingerprints if their
       * setters were called in a different order. Expected to be virtually free
       * of collisions for the purposes of diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 self_props_value = 2;</code>
       * @param value The selfPropsValue to set.
       * @return This builder for chaining.
       */
      public Builder setSelfPropsValue(int value) {
        copyOnWrite();
        instance.setSelfPropsValue(value);
        return this;
      }
      /**
       * <pre>
       * Numeric fingerprint for the node's own properties, without its children.
       * Note that this may depend on the way the node was built. In other words, 2
       * messages with the same content may have different fingerprints if their
       * setters were called in a different order. Expected to be virtually free
       * of collisions for the purposes of diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 self_props_value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSelfPropsValue() {
        copyOnWrite();
        instance.clearSelfPropsValue();
        return this;
      }

      /**
       * <pre>
       * Numeric fingerprint for all the children under this node. This value will
       * change when any of the children have changed. May be 0 if there are no
       * children. Expected to be virtually free of collisions for the purposes of
       * diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 child_nodes_value = 3;</code>
       * @return The childNodesValue.
       */
      @java.lang.Override
      public int getChildNodesValue() {
        return instance.getChildNodesValue();
      }
      /**
       * <pre>
       * Numeric fingerprint for all the children under this node. This value will
       * change when any of the children have changed. May be 0 if there are no
       * children. Expected to be virtually free of collisions for the purposes of
       * diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 child_nodes_value = 3;</code>
       * @param value The childNodesValue to set.
       * @return This builder for chaining.
       */
      public Builder setChildNodesValue(int value) {
        copyOnWrite();
        instance.setChildNodesValue(value);
        return this;
      }
      /**
       * <pre>
       * Numeric fingerprint for all the children under this node. This value will
       * change when any of the children have changed. May be 0 if there are no
       * children. Expected to be virtually free of collisions for the purposes of
       * diffing layout trees.
       * </pre>
       *
       * <code>sfixed32 child_nodes_value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearChildNodesValue() {
        copyOnWrite();
        instance.clearChildNodesValue();
        return this;
      }

      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      @java.lang.Override
      public java.util.List<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> getChildNodesList() {
        return java.util.Collections.unmodifiableList(
            instance.getChildNodesList());
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      @java.lang.Override
      public int getChildNodesCount() {
        return instance.getChildNodesCount();
      }/**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      @java.lang.Override
      public androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getChildNodes(int index) {
        return instance.getChildNodes(index);
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder setChildNodes(
          int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
        copyOnWrite();
        instance.setChildNodes(index, value);
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder setChildNodes(
          int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.Builder builderForValue) {
        copyOnWrite();
        instance.setChildNodes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder addChildNodes(androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
        copyOnWrite();
        instance.addChildNodes(value);
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder addChildNodes(
          int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint value) {
        copyOnWrite();
        instance.addChildNodes(index, value);
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder addChildNodes(
          androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.Builder builderForValue) {
        copyOnWrite();
        instance.addChildNodes(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder addChildNodes(
          int index, androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.Builder builderForValue) {
        copyOnWrite();
        instance.addChildNodes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder addAllChildNodes(
          java.lang.Iterable<? extends androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> values) {
        copyOnWrite();
        instance.addAllChildNodes(values);
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder clearChildNodes() {
        copyOnWrite();
        instance.clearChildNodes();
        return this;
      }
      /**
       * <pre>
       * The child nodes under this node. These must be in exactly the same order
       * and number as the corresponding elements under the corresponding layout
       * node.
       * </pre>
       *
       * <code>repeated .androidx.wear.protolayout.proto.NodeFingerprint child_nodes = 4;</code>
       */
      public Builder removeChildNodes(int index) {
        copyOnWrite();
        instance.removeChildNodes(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:androidx.wear.protolayout.proto.NodeFingerprint)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "selfTypeValue_",
              "selfPropsValue_",
              "childNodesValue_",
              "childNodes_",
              androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.class,
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0001\u0000\u0001\r\u0002\r\u0003" +
                "\r\u0004\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint> parser = PARSER;
          if (parser == null) {
            synchronized (androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:androidx.wear.protolayout.proto.NodeFingerprint)
    private static final androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint DEFAULT_INSTANCE;
    static {
      NodeFingerprint defaultInstance = new NodeFingerprint();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NodeFingerprint.class, defaultInstance);
    }

    public static androidx.wear.protolayout.proto.FingerprintProto.NodeFingerprint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NodeFingerprint> PARSER;

    public static com.google.protobuf.Parser<NodeFingerprint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
